---
- name: Configure ECN, CNP, PFC, and RoCEv2
  hosts: all
  become: yes
  vars:
    ip_base1: "192.1.1"
    ip_base2: "192.1.0"
  tasks:
    - name: Bring up interface ens844np0
      command: ip link set ens844np0 up

    - name: Bring up interface ens948np0
      command: ip link set ens948np0 up

    - name: Run ibdev2netdev to map ETH devices to network devices
      command: ibdev2netdev
      register: ibdev2netdev_output

    - name: Display ibdev2netdev output
      debug:
        var: ibdev2netdev_output.stdout
        
    - name: Set MTU for ens844np0
      ansible.builtin.command:
        cmd: ip link set dev ens844np0 mtu 4200

    - name: Set MTU for ens948np0
      ansible.builtin.command:
        cmd: ip link set dev ens948np0 mtu 4200

    - name: Verify MTU for ens844np0
      ansible.builtin.command:
        cmd: ip link show dev ens844np0
      register: mtu_ens844np0

    - name: Display MTU for ens844np0
      ansible.builtin.debug:
        msg: "MTU for ens844np0: {{ mtu_ens844np0.stdout_lines }}"

    - name: Verify MTU for ens948np0
      ansible.builtin.command:
        cmd: ip link show dev ens948np0
      register: mtu_ens948np0

    - name: Display MTU for ens948np0
      ansible.builtin.debug:
        msg: "MTU for ens948np0: {{ mtu_ens948np0.stdout_lines }}"

    - name: Extract the last octet from inventory_hostname
      ansible.builtin.set_fact:
        node_octet: "{{ inventory_hostname.split('.')[2] }}"

    - name: Add IP address to ens844np0
      ansible.builtin.command:
        cmd: "ip addr add {{ ip_base1 }}.{{ node_octet }}/23 dev ens844np0"

    - name: Add IP address to ens948np0
      ansible.builtin.command:
        cmd: "ip addr add {{ ip_base2 }}.{{ node_octet }}/23 dev ens948np0"

    - name: Verify IP address on ens844np0
      ansible.builtin.command:
        cmd: "ip addr show dev ens844np0"
      register: ens844np0_output

    - name: Verify IP address on ens948np0
      ansible.builtin.command:
        cmd: "ip addr show dev ens948np0"
      register: ens948np0_output

    - name: Extract the last octet from inventory_hostname
      ansible.builtin.set_fact:
        node_octet: "{{ inventory_hostname.split('.')[2] }}"

    - name: Add route for 192.1.0.0/16 via 192.1.1.254 on ens844np0 to table 101
      ansible.builtin.command:
        cmd: "ip route add 192.1.0.0/16 via {{ ip_base1 }}.254 dev ens844np0 table 101"

    - name: Add route for 192.1.0.0/16 via 192.1.2.254 on ens948np0 to table 102
      ansible.builtin.command:
        cmd: "ip route add 192.1.0.0/16 via {{ ip_base2 }}.254 dev ens948np0 table 102"

    - name: Add ip rule for traffic from 192.1.1.33 to table 101
      ansible.builtin.command:
        cmd: "ip rule add from {{ ip_base1 }}.{{ node_octet }} table 101"

    - name: Add ip rule for traffic from 192.1.2.33 to table 102
      ansible.builtin.command:
        cmd: "ip rule add from {{ ip_base2 }}.{{ node_octet }} table 102"

    - name: Debug - Verify routes in table 101
      ansible.builtin.command:
        cmd: "ip route show table 101"
      register: route_table_101

    - name: Debug - Display routes from table 101
      ansible.builtin.debug:
        msg: "Routes in table 101: {{ route_table_101.stdout_lines }}"

    - name: Debug - Verify routes in table 102
      ansible.builtin.command:
        cmd: "ip route show table 102"
      register: route_table_102

    - name: Debug - Display routes from table 102
      ansible.builtin.debug:
        msg: "Routes in table 102: {{ route_table_102.stdout_lines }}"

    - name: Enable ECN for class 3 on ens948np0 and ens844np0
      shell: |
        echo 1 > /sys/class/net/ens948np0/ecn/roce_np/enable/3
        echo 1 > /sys/class/net/ens844np0/ecn/roce_np/enable/3

    - name: Enable CNP L2 egress priority to 7 (enable CNP)
      shell: |
        echo 7 > /sys/class/net/ens948np0/ecn/roce_np/cnp_802p_prio
        echo 7 > /sys/class/net/ens844np0/ecn/roce_np/cnp_802p_prio

    - name: Map CNP to DSCP 48
      shell: |
        echo 48 > /sys/class/net/ens948np0/ecn/roce_np/cnp_dscp
        echo 48 > /sys/class/net/ens844np0/ecn/roce_np/cnp_dscp

    - name: Map PFC to priority 3 enable
      shell: |
        mlnx_qos -i ens948np0 --trust=dscp --pfc 0,0,0,1,0,0,0,0
        mlnx_qos -i ens844np0 --trust=dscp --pfc 0,0,0,1,0,0,0,0

    - name: Enable ECN for traffic
      sysctl:
        name: net.ipv4.tcp_ecn
        value: 1
        state: present

    - name: Set mode to RoCEv2 on the NICs
      shell: |
        cma_roce_mode -d mlx5_0 -p 1 -m 2
        cma_roce_mode -d mlx5_3 -p 1 -m 2

    - name: Set TOS(104) = DSCP(26) for RoCEv2 DATA for RDMA-CM QPs
      shell: |
        cma_roce_tos -d mlx5_0 -t 104
        cma_roce_tos -d mlx5_3 -t 104

    - name: Set TOS(104) = DSCP(26) for RoCEv2 DATA for RDMA Socket
      shell: |
        echo 104 > /sys/class/infiniband/mlx5_0/tc/1/traffic_class
        echo 104 > /sys/class/infiniband/mlx5_3/tc/1/traffic_class

    - name: Verify ECN for class 3
      shell: |
        cat /sys/class/net/ens948np0/ecn/roce_np/enable/3
        cat /sys/class/net/ens844np0/ecn/roce_np/enable/3
      register: ecn_verify

    - debug:
        var: ecn_verify.stdout_lines

    - name: Verify CNP L2 egress priority
      shell: |
        cat /sys/class/net/ens948np0/ecn/roce_np/cnp_802p_prio
        cat /sys/class/net/ens844np0/ecn/roce_np/cnp_802p_prio
      register: cnp_prio_verify

    - debug:
        var: cnp_prio_verify.stdout_lines

    - name: Verify CNP DSCP Mapping
      shell: |
        cat /sys/class/net/ens948np0/ecn/roce_np/cnp_dscp
        cat /sys/class/net/ens844np0/ecn/roce_np/cnp_dscp
      register: cnp_dscp_verify

    - debug:
        var: cnp_dscp_verify.stdout_lines

    - name: Verify PFC Mapping
      shell: |
        mlnx_qos -i ens948np0
        mlnx_qos -i ens844np0
      register: pfc_verify

    - debug:
        var: pfc_verify.stdout_lines

    - name: Verify ECN for traffic
      command: sysctl net.ipv4.tcp_ecn
      register: ecn_traffic_verify

    - debug:
        var: ecn_traffic_verify.stdout_lines

    - name: Verify RoCEv2 mode for NICs
      shell: |
        cma_roce_mode -d mlx5_0
        cma_roce_mode -d mlx5_3
      register: roce_mode_verify

    - debug:
        var: roce_mode_verify.stdout_lines

    - name: Verify TOS/DSCP for RDMA Socket
      shell: |
        cat /sys/class/infiniband/mlx5_0/tc/1/traffic_class
        cat /sys/class/infiniband/mlx5_3/tc/1/traffic_class
      register: tos_socket_verify

    - debug:
        var: tos_socket_verify.stdout_lines
